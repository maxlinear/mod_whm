%define {
    select WiFi {
        select Radio {
            select Vendor {
                on event "*" call whm_mxl_rad_setVendorObj_ocf;

                /*override_6g_mbssid_default_mode, Only for 6GHz*/
                %persistent bool OverrideMBSSID {
                    default 0;
                }
                /* ap_max_num_sta MAX_STA_COUNT=2007
                */
                %persistent uint16 ApMaxNumSta = 2007 {
                    on action validate call check_range { min = 0, max = 2007 };
                }
                /*sProbeReqCltMode*/
                %persistent bool SetProbeReqCltMode {
                    default 1;
                }
                /*sQAMplus, Only for 11n & HW MODE "g"*/
                %persistent bool SetQAMplus {
                    default 0;
                }
                /*sBfMode, -1 means it is disabled and won't be written to hostapd conf*/
                %persistent int32 SetBfMode {
                    default -1;
                }
                /* sPowerSelection - power reduction in percentage 6%:12 12%:9 25%:6 50%:3 75%:1 100%:0 */
                %persistent int32 SetPowerSelection = 100 {
                    on action validate call check_enum [100, 75, 50, 25, 12, 6];
                }
                /*ignore_40_mhz_intolerant*/
                %persistent bool Ignore40MhzIntolerant {
                    default 0;
                }
                /*obss_beacon_rssi_threshold*/
                %persistent int32 ObssBeaconRssiThreshold {
                    default -60;
                    on action validate call check_range { min = -100, max = 0 };
                }
                /*ProbeReqListTimer*/
                %persistent uint32 ProbeReqListTimer = 0 {
                   on action validate call check_range { min = 0, max = 60 };
                }
                /*sRadarRssiTh, only for 5GHz*/
                %persistent int8 SetRadarRssiTh = -66 {
                    on action validate call check_range { min = -128, max = 127 };
                }
                /* sCcaTh */
                %persistent string SetCcaTh = "-62 -62 -72 -72 -69" {
                     on action validate call whm_mxl_rad_validateCcaTh_pvf;
                }
                /* twt_responder_support */
                %persistent uint32 TwtResponderSupport {
                    default 1;
                }
                /* he_mac_twt_responder_support */
                %persistent uint32 HeMacTwtResponderSupport {
                    default 0;
                }
                /* dynamic_edca */
                %persistent bool DynamicEdca {
                    default true;
                }
                /* enable_he_debug_mode */
                %persistent bool HeDebugMode {
                    default false;
                }
                /* he_beacon, only for 6GHz */
                %persistent bool HeBeacon = false {
                    on action validate call whm_mxl_rad_validateDuplicateHeBeacon_pvf;
                }
                /* duplicate_beacon_enabled, only for 6GHz */
                %persistent bool DuplicateBeaconEnabled = false {
                    on action validate call whm_mxl_rad_validateDuplicateHeBeacon_pvf;
                }
                /* duplicate_beacon_bw, only for 6GHz, 0:20MHz 1:40MHz 2:80MHZ 3:160MHZ 4:320MHZ */
                %persistent uint32 DuplicateBeaconBw = 2 {
                    on action validate call check_range { min = 0, max = 4 };
                }
                /*dfs_channels_state_file_location*/
                %persistent string DfsChStateFile {
                    default "";
                }
                /* sub_band_dfs */
                %persistent uint32 SubBandDFS = 0 {
                    on action validate call check_range { min = 0, max = 60 };
                }
                /**
                 * Set first non DFS channel. This mode will be valid only if AutoChannelEnable will be disabled
                 */
                %persistent bool FirstNonDfs = 0 {
                    on action validate call whm_mxl_rad_validateFirstNonDfs_pvf;
                }
                /**
                * background_cac, Only for 5GHz
                * Note: this feature is for single hostapd
                * It will be applicable only after moving to single hostapd
                */
                %persistent bool BackgroundCac = true {
                    on action validate call whm_mxl_rad_validateBackgroundCac_pvf;
                }
                /**
                * HT Capabilites
                * Enable or disable desired capabilites
                * This object is not exposed to the outside world but still can be configured
                */
                %persistent %protected object HtCapabilities {
                    on event "*" call whm_mxl_rad_setHtCapabs_ocf;

                    %persistent bool Ldpc {
                        default 1;
                    }
                    %persistent bool Greenfield {
                        default 0;
                    }
                    %persistent bool ShortGi20 {
                        default 1;
                    }
                    %persistent bool ShortGi40 {
                        default 1;
                    }
                    %persistent bool TxStbc {
                        default 1;
                    }
                    %persistent bool MaxAmsdu {
                        default 1;
                    }
                    %persistent bool DsssCck40 {
                        default 1;
                    }
                    %persistent uint32 HtMinMpduStartSpacing {
                        on action validate call check_range { min = 0, max = 8 };
                        default 5;
                    }
                }
                /**
                * VHT Capabilites
                * Enable or disable desired capabilites
                * This object is not exposed to the outside world but still can be configured
                */
                %persistent %protected object VhtCapabilities {
                    on event "*" call whm_mxl_rad_setVhtCapabs_ocf;

                    %persistent bool Rxldpc {
                        default 1;
                    }
                    %persistent uint32 Vht160 {
                        default 2;
                    }
                    %persistent bool ShortGi80 {
                        default 1;
                    }
                    %persistent bool ShortGi160 {
                        default 1;
                    }
                    %persistent bool TxStbc2by1 {
                        default 1;
                    }
                    %persistent bool MuBeamformee {
                        default 1;
                    }
                    %persistent bool VhtTxopPs {
                        default 0;
                    }
                    %persistent bool HtcVht {
                        default 1;
                    }
                    %persistent bool RxAntennaPattern {
                        default 1;
                    }
                    %persistent bool TxAntennaPattern {
                        default 1;
                    }
                    %persistent uint32 VhtMaxMpdu {
                        default 11454;
                    }
                    %persistent uint32 VhtMaxAmpduLenExp {
                        on action validate call check_range { min = 0, max = 7 };
                        default 7;
                    }
                    %persistent uint32 VhtLinkAdapt {
                        on action validate call check_range { min = 0, max = 3 };
                        default 3;
                    }
                }
                /**
                * 6G Band HE Capabilites
                * Modify desired capabilites
                * This object is not exposed to the outside world but still can be configured
                */
                %persistent %protected object He6GhzCapabilities {
                    /* HE_6GHZ_BAND_CAP_MAX_MPDU_LEN */
                    %persistent uint8 he_6ghz_max_mpdu {
                        default 2;
                    }
                    /* HE_6GHZ_BAND_CAP_MAX_AMPDU_LEN_EXP */
                    %persistent uint8 he_6ghz_max_ampdu_len_exp {
                        default 7;
                    }
                    /* HE_6GHZ_BAND_CAP_RX_ANTPAT_CONS */
                    %persistent uint8 he_6ghz_rx_ant_pat {
                        default 1;
                    }
                    /* HE_6GHZ_BAND_CAP_TX_ANTPAT_CONS */
                    %persistent uint8 he_6ghz_tx_ant_pat {
                        default 0;
                    }
                }
                /*
                * AFC custom config parameters
                */
                %persistent object AFC {
                    on event "*" call whm_mxl_rad_setAfcConf_ocf;

                    %persistent string AfcdSock{
                        default "/var/run/afcd.sock";
                    }
                    %persistent string AfcOpClass{
                        default "131,132,133,134,137";
                     }
                    %persistent string AfcFrequencyRange{
                        default "5925:6425,6525:6875";
                     }
                    %persistent string AfcCertIds{
                        default "US_47_CFR_PART_15_SUBPART_E:CID000";
                     }
                    %persistent string AfcSerialNumber{
                        default "SN000";
                     }
                    %persistent string AfcLinearPolygon{
                        default "-121.98586:37.381933";
                     }
                    %persistent int8 AfcLocationType = -1 {
                        on action validate call check_range { min = -1, max = 2 };
                        default "0";
                     }
                    %persistent string AfcRequestId {
                        default "11235813";
                     }
                    %persistent string AfcRequestVersion {
                        default "1.4";
                     }
                    %persistent string AfcdServerConf {
                        default "0";
                     }
                }
                /*
                * BSS Color custom config parameters
                */
                %persistent object BssColor {
                    on event "*" call whm_mxl_rad_setBssColor_ocf;

                    /*autonomous_color_change*/
                    %persistent bool AutonomousColorChange {
                        default true;
                    }
                    /*bss_color_change_timeout*/
                    %persistent int32 ChangeTimeout = 50 {
                        on action validate call whm_mxl_rad_validateBssColorChangeTimeout_pvf;
                    }
                    /*num_bss_color_coll_thresh*/
                    %persistent int32 NumCollisionsThreshold = 100 {
                        on action validate call check_range { min = 1, max = 500 };
                    }
                    /*bss_color_coll_age_thresh*/
                    %persistent int32 CollAgeThresh = 10 {
                        on action validate call check_range { min = 1, max = 60 };
                    }
                    /*used_color_table_ageing*/
                    %persistent int32 UsedColorTableAgeing = 90 {
                        on action validate call check_range { min = 1, max = 1440 };
                    }
                    /*he_bss_color, 0 by default- won't be written to hostapd conf*/
                    %persistent int32 HeBssColor = 0 {
                        on action validate call check_range { min = 0, max = 63 };
                    }
                    /**
                    * he_bss_color_randomize
                    * This parameter, won't be written to hostapd conf.
                    * If he_bss_color_randomize== true -> he_bss_color will get random value.
                    */
                    %persistent bool HeBssColorRandomize {
                        default false;
                    }
                    /**
                    * This parameter, won't be written to hostapd conf.
                    * SwitchCountdown is the switch time in ms.
                    * Default is 0 -> Its up to the driver to decide the countdown.
                    * For example 1000 is countdown of 10 beacons.
                    */
                    %persistent uint32 SwitchCountdown {
                        default 0;
                    }
                }
                /*
                * Overlapping BSS Scan Parameters
                * Only for 2.4GHz Band
                * IEEE Std 802.11-2020, 9.4.2.58
                */
                %persistent object ObssScanParams {
                    on event "*" call whm_mxl_rad_setObssScanParams_ocf;

                    /* obss_interval */
                    %persistent int32 ObssInterval {
                        default 300;
                        on action validate call whm_mxl_rad_validateObssInterval_pvf;
                    }
                    /* scan_passive_dwell */
                    %persistent uint32 ScanPassiveDwell {
                        default 20;
                        on action validate call check_range { min = 5, max = 1000 };
                    }
                    /* scan_active_dwell */
                    %persistent uint32 ScanActiveDwell {
                        default 10;
                        on action validate call check_range { min = 10, max = 1000 };
                    }
                    /* scan_passive_total_per_channel */
                    %persistent uint32 ScanPassiveTotalPerChannel {
                        default 200;
                        on action validate call check_range { min = 200, max = 10000 };
                    }
                    /* scan_active_total_per_channel */
                    %persistent uint32 ScanActiveTotalPerChannel {
                        default 20;
                        on action validate call check_range { min = 20, max = 10000 };
                    }
                    /* channel_transition_delay_factor */
                    %persistent uint32 ChannelTransitionDelayFactor {
                        default 5;
                        on action validate call check_range { min = 5, max = 100 };
                    }
                    /* scan_activity_threshold */
                    %persistent uint32 ScanActivityThreshold {
                        default 25;
                        on action validate call check_range { min = 0, max = 100 };
                    }
                }
                /*
                * Srart after parameters
                */
                %persistent object DelayedStart {
                    on event "*" call whm_mxl_rad_setDelayedStartConf_ocf;

                    /* start_after */
                    %persistent string StartAfter{
                        default "";
                    }
                    /* start_after_delay */
                    %persistent uint32 StartAfterDelay{
                        default 0;
                        on action validate call check_range { min = 0, max = 600 };
                    }
                    /* start_after_watchdog_time */
                    %persistent uint32 StartAfterWatchdogTime{
                        default 0;
                        on action validate call check_range { min = 0, max = 600 };
                    }
                }
                /* Enable or Disable puncturing (hostapd conf parameter : punct_bitmap) */
                %persistent uint16 PunctureBitMap {
                    default 0;
                    on action validate call check_range {min = 0, max = 65535};
                }
                /**
                 * Debug call for vendor radio
                 */
                htable debug(%in string op) <!import:${module}:_whm_mxl_rad_debug!>;

                /**
                 * Returns a map containing the status of the CSI stats socket.
                 * The map contains:
                 * Active : Indicates whether the socket is created and ready to read stats from
                 * SocketPath : The full socket path
                 */
                htable getCsiSocketStatus() <!import:${module}:_whm_mxl_csi_getCsiSocketStatus!>;
            }
        }
    }
}
%define {
    select WiFi {
        select AccessPoint {
            /**
            * Vendor specific data for the AccessPoint
            * Vendor plugins can add fields to this object to allow vendor specific
            * data and configuration to be made available.
            */
            %persistent object Vendor {
                on event "*" call whm_mxl_vap_setVapVendorObj_ocf;

                /* enable_hairpin */
                %persistent bool EnableHairpin {
                    default 0;
                }
                /* ap_max_inactivity */
                %persistent uint32 ApMaxInactivity = 60 {
                    on action validate call check_range { min = 0, max = 86400 };
                }
                /* unsol_bcast_probe_resp_interval - can't be higher than 0 if fils_discovery_max_interval > 0 */
                %persistent uint32 UnsolBcastProbeRespInterval = 0 {
                    on action validate call check_range { min = 0, max = 20 };
                    on action validate call whm_mxl_vap_validateFilsUpr_pvf;
                }
                /* fils_discovery_max_interval - can't be higher than 0 if unsol_bcast_probe_resp_interval > 0 */
                %persistent uint32 FilsDiscoveryMaxInterval = 0 {
                    on action validate call check_range { min = 0, max = 20 };
                    on action validate call whm_mxl_vap_validateFilsUpr_pvf;
                }
                /* management_frames_rate - Default is disabled, the value in this case is 0xFF */
                %persistent uint32 ManagementFramesRate = 0xFF {
                    on action validate call whm_mxl_vap_validateManagementFramesRate_pvf;
                }
                %persistent int32 BssTransition {
                    default 1;
                }
                /* mgmt_frame_power_control */
                %persistent int32 MgmtFramePowerControl = 0 {
                    on action validate call check_range { min = -20, max = 0 };
                }
                /* vendor_vht */
                %persistent bool VendorVht {
                    default true;
                }
                /* Number of reserved STAs in the BSS */
                %persistent int32 NumResSta {
                    on action validate call whm_mxl_vap_validateNumResSta_pvf;
                    default 0;
                }
                %persistent bool SaeExtKey {
                    default false;
                }
                %persistent string GroupMgmtCipher {
                    default "AES-128-CMAC";
                }
                %persistent object MultiAp {
                    on event "*" call whm_mxl_vendorMultiAp_setConf_ocf;

                    %persistent int32 ClientDisallow {
                       /*
                        * Multi-AP client disallow
                        * Used to disallow profile specific backhaul STA association
                        * Bitmap of the disallowed Profile-X profiles
                        * 1 = Profile-1 Backhaul STA association disallowed
                        * 2 = Profile-2 Backhaul STA association disallowed
                        */
                        on action validate call check_range { min = 0, max = 3 };
                        default 0;
                    }
                }
                /*
                  Vendor MLO Configuration parameters
                */
                %persistent object MLO {
                    on event "*" call whm_mxl_vendorMLO_setConf_ocf;

                    /*mlo_id*/
                    %persistent int32 MloId {
                        default -1;
                    }
                    /*ap_mld_mac*/
                    %persistent string ApMldMac {
                        on action validate call is_valid_macaddr;
                        default "";
                    }
                    /*wds_single_ml_assoc*/
                    %persistent bool WdsSingleMlAssoc {
                        default false;
                    }
                    /*wds_primary_link*/
                    %persistent bool WdsPrimaryLink {
                        default false;
                    }
                }

                /*
                  Vendor Beacon protection flag (Supported only for 11BE)
                */
                %persistent bool DisableBeaconProtection {
                    default false;
                }

                /*
                  Disable PBAC - protected block ack
                */
                %persistent bool DisablePbac {
                    default true;
                }

                %persistent int32 MboCellAware {
                    on action validate call check_range { min = 0, max = 1 };
                    default 1;
                }

                %persistent object SoftBlock {
                    on event "*" call whm_mxl_vendorSoftBlock_setConf_ocf;

                    /*Enable or disable soft block, soft_block_acl_enable*/
                    %persistent int32 SoftBlockAclEnable {
                        on action validate call check_range { min = 0, max = 1 };
                        default 0;
                    }
                    /*soft_block_acl_wait_time*/
                    %persistent uint32 SoftBlockAclWaitTime {
                        on action validate call check_range { min = 0, max = 100000 };
                        default 10000;
                    }
                    /*soft_block_acl_allow_time*/
                    %persistent uint32 SoftBlockAclAllowTime {
                        on action validate call check_range { min = 0, max = 100000 };
                        default 15000;
                    }
                    /*soft_block_acl_on_auth_req*/
                    %persistent int32 SoftBlockAclOnAuthReq {
                        on action validate call check_range { min = 0, max = 126 };
                        default 1;
                    }
                    /*soft_block_acl_on_probe_req*/
                    %persistent int32 SoftBlockAclOnProbeReq {
                        on action validate call check_range { min = 0, max = 2 };
                        default 1;
                    }
                }
                /**
                * Enabling the OWE Transition mode support parameters
                * owe_transition_bssid and owe_transition_ssid
                */
                %persistent string OWETransitionBSSID {
                    on action validate call is_valid_macaddr;
                    default "";
                }
                %persistent string OWETransitionSSID {
                    on action validate call whm_mxl_vap_validateOweTransSsid_pvf;
                    default "";
                }
                /*
                * Enabling the Dynamic Multicast Mode
                * dynamic_multicast_mode
                * 0 - disable
                * 1 - dynamic mode
                * 2 - static mode
                */
                %persistent uint32 DynamicMulticastMode {
                    on action validate call check_range { min = 0, max = 2 };
                    default 0;
                }
                /* Adding the Dynamic Multicast Rate
                * dynamic_multicast_rate
                */
                %persistent uint32 DynamicMulticastRate {
                    on action validate call check_range { min = 1, max = 54 };
                    default 1;
                }
                /*sBridgeMode*/
                %persistent bool SetBridgeMode {
                    default false;
                }
                /*
                * Configure WPA3 Personal Compatibility Mode
                * NOTE: This is a hacky method. At the time of implementation
                *       upstream PWHM does not support this mode. This mode
                *       should be deprecated when said functionality is
                *       available in PWHM.
                */
                %persistent bool EnableWPA3PersonalCompatibility {
                    default false;
                }
            }
        }
    }
}

%define {
    select WiFi {
        select EndPoint {
            /**
            * Vendor specific data for the EndPoint
            * Vendor plugins can add fields to this object to allow vendor specific
            * data and configuration to be made available.
            */
            %persistent object Vendor {
                on event "*" call whm_mxl_ep_setEpVendorObj_ocf;
                
                /**
                 * wds - If set, station may connect to peer ap in 4 address mode
                 *
                 * Values:
                 * 0 - connect to peer AP in 3 address mode (default)
                 * 1 - connect to peer AP in 4 address mode
                 * 2 - connect to peer AP in 3/4 address mode depending on MULTI_AP IE
                 *     in AP Assoc response
                 */
                %persistent uint32 Wds {
                    on action validate call check_range { min = 0, max = 2 };
                    default 1;
                }
                /**
                 * vendor_elems - publish Vendor Specific IEs for specified management frames
                 *
                 * format: <mfid> <vsie_hex> [mfid] [vsie_hex] ...
                 * mfid values: enum wpa_vendor_elem_frame
                 */
                %persistent string VendorElements {
                    default "13 dd050017353001 14 dd050017353001";
                }
                /**
                 * multi_ap_profile - defines wether the Multi-AP Agent implements Profile-2
                 *
                 * Values:
                 * 0 - profile not set.
                 * 1 - Multi-AP Profile-1
                 * 2 - Multi-AP Profile-2
                 * 3 - Multi-AP Profile-3
                 */
                %persistent uint32 MultiApProfile {
                    on action validate call check_range { min = 0, max = 3 };
                    default 0;
                }
                /**
                 * wps_cred_add_sae - Whether to enable SAE automatically for WPS
                 *
                 * 0 = only add the explicitly listed WPA2-PSK configuration
                 * 1 = add both the WPA2-PSK and SAE configuration and enable PMF so
                 *     that the station gets configured in WPA3-Personal transition mode
                 *     (supports both WPA2-Personal (PSK) and WPA3-Personal (SAE) APs).
                 */
                %persistent bool WpsCredAddSae {
                    default 0;
                }
            }
        }
    }
}

%define {
    select WiFi {
        select Vendor {
            /* Vendor module operating mode */
            %protected %persistent object ModuleMode {
                on event "*" call whm_mxl_module_modeObj_ocf;

                %persistent bool CertificationMode {
                    default 0;
                }
            }
            /*
             * Vendor specific daemon configurations management.
             */
            %protected %persistent object Daemon[] {
                on action destroy call whm_mxl_dmnMngr_delDmnEntry_odf;
                on event "*" call whm_mxl_dmnMngr_setDmnEntry_ocf;

                /*
                 * Vendor managed daemon Name i.e. hostapd, wpa_supplicant
                 */
                %persistent %unique string Name;

                %persistent object ExecOptions {
                    on event "*" call whm_mxl_dmnMngr_setDmnExecOptsObj_ocf;

                   /*
                    * option to select daemon output path of logs
                    * Stdout: output logs to stdout, note that it is supressed by amxrt process.
                    * Syslog: output logs to syslog.
                    */
                    %persistent string LogOutputPath {
                        on action validate call check_enum ["Stdout","Syslog"];
                        default "Stdout";
                    }

                   /*
                    * option to set daemon log output level
                    */
                    %persistent string LogDebugLevel {
                        on action validate call check_enum ["Info","Debug","Msgdump","Excessive","Default"];
                        default "Info";
                    }
                    %persistent bool SupplicantMasterMode {
                        default false;
                    }
                }
            }
            /*
             * Reconf Manager configuration.
             */
            %persistent object ReconfManager {
                on event "*" call whm_mxl_reconfMngr_configure_ocf;

                %persistent bool CommitEnable {
                    default 1;
                }
                %persistent uint32 CommitDelay {
                    default 1000;
                }
                %persistent uint32 BootBlockDelay {
                    default 10000;
                }
            }
        }
    }
}

%populate {
    on event regexp("dm:object-(added|changed)") call whm_mxl_vap_setVendorData_ocf
        filter 'path matches "WiFi\.AccessPoint\.[0-32]+\.Vendor\.+"';
    on event "dm:object-changed" call whm_mxl_rad_updateObssCoexistence
        filter 'path matches "WiFi\.Radio\.[0-9]+\." && (contains("parameters.ObssCoexistenceEnable"))';
    on event "dm:object-changed" call whm_mxl_vap_updateSsidAdvertisement
        filter 'path matches "WiFi\.AccessPoint\.[0-32]+\." && (contains("parameters.SSIDAdvertisementEnabled"))';
    on event "dm:object-changed" call whm_mxl_vap_updateMaxAssociatedDevices
        filter 'path matches "WiFi\.AccessPoint\.[0-32]+\." && (contains("parameters.MaxAssociatedDevices"))';
}
